# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from proto import thing_pb2 as proto_dot_thing__pb2


class testServerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.analy_data_add = channel.unary_unary(
        '/testServer.testServer/analy_data_add',
        request_serializer=proto_dot_thing__pb2.DataAddReq.SerializeToString,
        response_deserializer=proto_dot_thing__pb2.DataAddRes.FromString,
        )


class testServerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def analy_data_add(self, request, context):
    """测试 加一返回
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_testServerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'analy_data_add': grpc.unary_unary_rpc_method_handler(
          servicer.analy_data_add,
          request_deserializer=proto_dot_thing__pb2.DataAddReq.FromString,
          response_serializer=proto_dot_thing__pb2.DataAddRes.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'testServer.testServer', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
